// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
generator zod {
  provider       = "zod-prisma-types"
}
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @map("_id") @default(cuid())
  name          String
  telegramChatId String?
  telegramUsername String?
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  pendingConnections TelegramPendingConnection[]
  @@unique([email])
  @@map("user")
  Receipt Receipt[]
}

model TelegramPendingConnection {
  id              String  @id @map("_id") @default(cuid())
  userId          String
  connectionToken String   
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([expiresAt])
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Receipt {
  id        String  @id @map("_id") @default(cuid())
  name      String
  date      DateTime
  amount    String
  type      ReceiptType
  items     Item[]
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReceiptType {
  GROCERIES
  ELECTRONICS
  CLOTHING
}


model Item {
  id        String  @id @map("_id") @default(cuid())
  name      String
  weight    Int
  weightUnit String
  wasteCategory WasteCategory?
  category  String
  expiry    DateTime?
  price     Float
  quantity  Int
  brand     String?
  isConsumed Boolean? @default(false) 
  receiptId String
  receipt   Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
}

enum WasteCategory {
  RECYCLE
  COMPOST
  LANDFILL
}